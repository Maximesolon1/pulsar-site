"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[93621],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>f});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,f=p["".concat(s,".").concat(m)]||p[m]||g[m]||o;return t?a.createElement(f,r(r({ref:n},c),{},{components:t})):a.createElement(f,r({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},97913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(58168),i=(t(96540),t(15680));const o={id:"functions-overview",title:"Pulsar Functions overview",sidebar_label:"Overview",original_id:"functions-overview"},r=void 0,l={unversionedId:"functions-overview",id:"version-2.4.0/functions-overview",title:"Pulsar Functions overview",description:"Pulsar Functions are lightweight compute processes that",source:"@site/versioned_docs/version-2.4.0/functions-overview.md",sourceDirName:".",slug:"/functions-overview",permalink:"/docs/2.4.0/functions-overview",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.4.0/functions-overview.md",tags:[],version:"2.4.0",frontMatter:{id:"functions-overview",title:"Pulsar Functions overview",sidebar_label:"Overview",original_id:"functions-overview"},sidebar:"version-2.4.0/docsSidebar",previous:{title:"Schema Registry",permalink:"/docs/2.4.0/concepts-schema-registry"},next:{title:"Get started",permalink:"/docs/2.4.0/functions-quickstart"}},s={},u=[{value:"Goals",id:"goals",level:2},{value:"Inspirations",id:"inspirations",level:2},{value:"Programming model",id:"programming-model",level:2},{value:"Word count example",id:"word-count-example",level:3},{value:"Content-based routing example",id:"content-based-routing-example",level:3},{value:"Command-line interface",id:"command-line-interface",level:2},{value:"Fully Qualified Function Name (FQFN)",id:"fully-qualified-function-name-fqfn",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Supported languages",id:"supported-languages",level:2},{value:"Pulsar Functions API",id:"pulsar-functions-api",level:2},{value:"Function context",id:"function-context",level:3},{value:"Language-native functions",id:"language-native-functions",level:3},{value:"Pulsar Functions SDK",id:"pulsar-functions-sdk",level:2},{value:"Java",id:"java",level:3},{value:"Python",id:"python",level:3},{value:"Go",id:"go",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Local run mode",id:"local-run-mode",level:3},{value:"Cluster mode",id:"cluster-mode",level:3},{value:"Run instances in parallel",id:"run-instances-in-parallel",level:3},{value:"Function instance resources",id:"function-instance-resources",level:3},{value:"Logging",id:"logging",level:3},{value:"User configuration",id:"user-configuration",level:3},{value:"Trigger Pulsar Functions",id:"trigger-pulsar-functions",level:3},{value:"Processing guarantees",id:"processing-guarantees",level:2},{value:"Metrics",id:"metrics",level:2},{value:"State storage",id:"state-storage",level:2}],c={toc:u},p="wrapper";function g(e){let{components:n,...o}=e;return(0,i.yg)(p,(0,a.A)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Pulsar Functions")," are lightweight compute processes that"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"consume messages from one or more Pulsar topics,"),(0,i.yg)("li",{parentName:"ul"},"apply a user-supplied processing logic to each message,"),(0,i.yg)("li",{parentName:"ul"},"publish the results of the computation to another topic.")),(0,i.yg)("p",null,"The following is an example of a Pulsar Function written in Java (using the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#java-native-functions"},"native interface"),")."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'\nimport java.util.Function;\n\npublic class ExclamationFunction implements Function<String, String> {\n    @Override\n    public String apply(String input) { return String.format("%s!", input); }\n}\n\n')),(0,i.yg)("p",null,"The following is an example of a Pulsar Function written in Python (using the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#python-native-functions"},"native interface"),")."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'\ndef process(input):\n    return "{0}!".format(input)\n\n')),(0,i.yg)("p",null,"The following is an example of a Pulsar Function written in Go."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'\nimport (\n    "fmt"\n    "context"\n\n    "github.com/apache/pulsar/pulsar-function-go/pf"\n)\n\nfunc HandleRequest(ctx context.Context, in []byte) error {\n    fmt.Println(string(in) + "!")\n    return nil\n}\n\nfunc main() {\n    pf.Start(HandleRequest)\n}\n\n')),(0,i.yg)("p",null,"A Pulsar Function is executed each time a message is published to its input topic. For example, if a function has an input topic called ",(0,i.yg)("inlineCode",{parentName:"p"},"tweet-stream"),", the function runs each time a message is published to ",(0,i.yg)("inlineCode",{parentName:"p"},"tweet-stream"),"."),(0,i.yg)("h2",{id:"goals"},"Goals"),(0,i.yg)("p",null,"With Pulsar Functions, you can create complex processing logic without deploying a separate neighboring system (such as ",(0,i.yg)("a",{parentName:"p",href:"http://storm.apache.org/"},"Apache Storm"),", ",(0,i.yg)("a",{parentName:"p",href:"https://apache.github.io/incubator-heron"},"Apache Heron"),", ",(0,i.yg)("a",{parentName:"p",href:"https://flink.apache.org/"},"Apache Flink"),"). Pulsar Functions are computing infrastructure of Pulsar messaging system. The core goal is tied to a series of other goals:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Developer productivity (",(0,i.yg)("a",{parentName:"li",href:"#language-native-functions"},"language-native")," vs ",(0,i.yg)("a",{parentName:"li",href:"#the-pulsar-functions-sdk"},"Pulsar Functions SDK")," functions)"),(0,i.yg)("li",{parentName:"ul"},"Easy troubleshooting"),(0,i.yg)("li",{parentName:"ul"},"Operational simplicity (no need for an external processing system)")),(0,i.yg)("h2",{id:"inspirations"},"Inspirations"),(0,i.yg)("p",null,"Pulsar Functions are inspired by (and take cues from) several systems and paradigms:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Stream processing engines such as ",(0,i.yg)("a",{parentName:"li",href:"http://storm.apache.org/"},"Apache Storm"),", ",(0,i.yg)("a",{parentName:"li",href:"https://apache.github.io/incubator-heron"},"Apache Heron"),", and ",(0,i.yg)("a",{parentName:"li",href:"https://flink.apache.org"},"Apache Flink")),(0,i.yg)("li",{parentName:"ul"},'"Serverless" and "Function as a Service" (FaaS) cloud platforms like ',(0,i.yg)("a",{parentName:"li",href:"https://aws.amazon.com/lambda/"},"Amazon Web Services Lambda"),", ",(0,i.yg)("a",{parentName:"li",href:"https://cloud.google.com/functions/"},"Google Cloud Functions"),", and ",(0,i.yg)("a",{parentName:"li",href:"https://azure.microsoft.com/en-us/services/functions/"},"Azure Cloud Functions"))),(0,i.yg)("p",null,"Pulsar Functions can be described as"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://aws.amazon.com/lambda/"},"Lambda"),"-style functions that are"),(0,i.yg)("li",{parentName:"ul"},"specifically designed to use Pulsar as a message bus.")),(0,i.yg)("h2",{id:"programming-model"},"Programming model"),(0,i.yg)("p",null,"The core programming model of Pulsar Functions is simple. Functions receive messages from one or more ",(0,i.yg)("strong",{parentName:"p"},"input ",(0,i.yg)("a",{parentName:"strong",href:"/docs/2.4.0/reference-terminology#topic"},"topics")),". Each time a message is received, the function will complete the following tasks."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Apply some processing logic to the input and write output to:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"An ",(0,i.yg)("strong",{parentName:"li"},"output topic")," in Pulsar"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#state-storage"},"Apache BookKeeper")))),(0,i.yg)("li",{parentName:"ul"},"Write logs to a ",(0,i.yg)("strong",{parentName:"li"},"log topic")," (potentially for debugging purposes)"),(0,i.yg)("li",{parentName:"ul"},"Increment a ",(0,i.yg)("a",{parentName:"li",href:"#word-count-example"},"counter"))),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Pulsar Functions core programming model",src:t(92086).A,width:"1712",height:"1049"})),(0,i.yg)("h3",{id:"word-count-example"},"Word count example"),(0,i.yg)("p",null,"If you implement the classic word count example using Pulsar Functions, it looks something like this:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Pulsar Functions word count example",src:t(93285).A,width:"1769",height:"916"})),(0,i.yg)("p",null,"To write the function in ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-java"},"Java")," with ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#java-sdk-functions"},"Pulsar Functions SDK for Java"),", you can write the function as follows."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'\npackage org.example.functions;\n\nimport org.apache.pulsar.functions.api.Context;\nimport org.apache.pulsar.functions.api.Function;\n\nimport java.util.Arrays;\n\npublic class WordCountFunction implements Function<String, Void> {\n    // This function is invoked every time a message is published to the input topic\n    @Override\n    public Void process(String input, Context context) throws Exception {\n        Arrays.asList(input.split(" ")).forEach(word -> {\n            String counterKey = word.toLowerCase();\n            context.incrCounter(counterKey, 1);\n        });\n        return null;\n    }\n}\n\n')),(0,i.yg)("p",null,"Bundle and build the JAR file to be deployed. You can find approaches in ",(0,i.yg)("a",{parentName:"p",href:"#creating-an-uber-jar"},"Creating an Uber JAR")," and ",(0,i.yg)("a",{parentName:"p",href:"#creating-a-nar-package"},"Creating a NAR package"),".\nThen ",(0,i.yg)("a",{parentName:"p",href:"#cluster-run-mode"},"deploy it")," in your Pulsar cluster using the ",(0,i.yg)("a",{parentName:"p",href:"#command-line-interface"},"command line")," as follows."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --jar target/my-jar-with-dependencies.jar \\\n  --classname org.example.functions.WordCountFunction \\\n  --tenant public \\\n  --namespace default \\\n  --name word-count \\\n  --inputs persistent://public/default/sentences \\\n  --output persistent://public/default/count\n\n")),(0,i.yg)("h3",{id:"content-based-routing-example"},"Content-based routing example"),(0,i.yg)("p",null,"Pulsar Functions are used in many cases. The following is a sophisticated example that involves content-based routing."),(0,i.yg)("p",null,"For example, a function takes items (strings) as input and publishes them to either a ",(0,i.yg)("inlineCode",{parentName:"p"},"fruits")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"vegetables")," topic, depending on the item. Or, if an item is neither fruit nor vegetable, a warning is logged to a ",(0,i.yg)("a",{parentName:"p",href:"#logging"},"log topic"),". The following is a visual representation."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Pulsar Functions routing example",src:t(14160).A,width:"1772",height:"836"})),(0,i.yg)("p",null,"If you implement this routing functionality in Python, it looks something like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'\nfrom pulsar import Function\n\nclass RoutingFunction(Function):\n    def __init__(self):\n        self.fruits_topic = "persistent://public/default/fruits"\n        self.vegetables_topic = "persistent://public/default/vegetables"\n\n    @staticmethod\n    def is_fruit(item):\n        return item in ["apple", "orange", "pear", "other fruits..."]\n\n    @staticmethod\n    def is_vegetable(item):\n        return item in ["carrot", "lettuce", "radish", "other vegetables..."]\n\n    def process(self, item, context):\n        if self.is_fruit(item):\n            context.publish(self.fruits_topic, item)\n        elif self.is_vegetable(item):\n            context.publish(self.vegetables_topic, item)\n        else:\n            warning = "The item {0} is neither a fruit nor a vegetable".format(item)\n            context.get_logger().warn(warning)\n\n')),(0,i.yg)("h2",{id:"command-line-interface"},"Command-line interface"),(0,i.yg)("p",null,"Pulsar Functions are managed using the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/reference-ulsar-admin"},(0,i.yg)("inlineCode",{parentName:"a"},"pulsar-admin"))," CLI tool (in particular the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/reference-ulsar-admin#functions"},(0,i.yg)("inlineCode",{parentName:"a"},"functions"))," command). The following example runs a function in the ",(0,i.yg)("a",{parentName:"p",href:"#local-run-mode"},"local run mode"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions localrun \\\n  --inputs persistent://public/default/test_src \\\n  --output persistent://public/default/test_result \\\n  --jar examples/api-examples.jar \\\n  --classname org.apache.pulsar.functions.api.examples.ExclamationFunction\n\n")),(0,i.yg)("h2",{id:"fully-qualified-function-name-fqfn"},"Fully Qualified Function Name (FQFN)"),(0,i.yg)("p",null,"Each Pulsar Function has a ",(0,i.yg)("strong",{parentName:"p"},"Fully Qualified Function Name")," (FQFN) that consists of three elements: the function tenant, namespace, and function name. FQFN looks like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-http"},"\ntenant/namespace/name\n\n")),(0,i.yg)("p",null,"FQFNs enable you to create multiple functions with the same name provided that they are in different namespaces."),(0,i.yg)("h2",{id:"configuration"},"Configuration"),(0,i.yg)("p",null,"You can configure a Pulsar Function in the following ways:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Via ",(0,i.yg)("a",{parentName:"li",href:"#command-line-interface"},"command-line arguments")," passed to the ",(0,i.yg)("a",{parentName:"li",href:"/docs/2.4.0/reference-ulsar-admin#functions"},(0,i.yg)("inlineCode",{parentName:"a"},"pulsar-admin functions"))," interface"),(0,i.yg)("li",{parentName:"ul"},"Via ",(0,i.yg)("a",{parentName:"li",href:"http://yaml.org/"},"YAML")," configuration files")),(0,i.yg)("p",null,"If you use a YAML configuration file, you must specify a path to the file on the command line. The following is an example."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --function-config-file ./my-function.yaml\n\n")),(0,i.yg)("p",null,"The following is an example of the ",(0,i.yg)("inlineCode",{parentName:"p"},"my-function.yaml")," file."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"\nname: my-function\ntenant: public\nnamespace: default\njar: ./target/my-functions.jar\nclassName: org.example.pulsar.functions.MyFunction\ninputs:\n- persistent://public/default/test_src\noutput: persistent://public/default/test_result\n\n")),(0,i.yg)("p",null,"You can specify some function attributes via CLI arguments or in a configuration file in YAML format."),(0,i.yg)("h2",{id:"supported-languages"},"Supported languages"),(0,i.yg)("p",null,"Currently, you can write Pulsar Functions in ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-java"},"Java"),", ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-python"},"Python"),", and ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-go"},"Go"),". Support for additional languages is coming soon."),(0,i.yg)("h2",{id:"pulsar-functions-api"},"Pulsar Functions API"),(0,i.yg)("p",null,"Pulsar Functions API enables you to create processing logic that is:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Type safe. Pulsar Functions can process raw bytes or more complex, application-specific types."),(0,i.yg)("li",{parentName:"ul"},"Based on SerDe (",(0,i.yg)("strong",{parentName:"li"},"Ser"),"ialization/",(0,i.yg)("strong",{parentName:"li"},"De"),'serialization). A variety of types are supported "out of the box" but you can also create your own custom SerDe logic.')),(0,i.yg)("h3",{id:"function-context"},"Function context"),(0,i.yg)("p",null,"Each Pulsar Function created using ",(0,i.yg)("a",{parentName:"p",href:"#the-pulsar-functions-sdk"},"Pulsar Functions SDK")," has access to a context object that both provides:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"A wide variety of information about the function, including:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The name of the function"),(0,i.yg)("li",{parentName:"ul"},"The tenant and namespace of the function"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#user-configuration"},"User-supplied configuration")," values")),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},"Special functionality, including:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The ability to produce ",(0,i.yg)("a",{parentName:"li",href:"#logging"},"logs")," to a specified logging topic"),(0,i.yg)("li",{parentName:"ul"},"The ability to produce ",(0,i.yg)("a",{parentName:"li",href:"#metrics"},"metrics"))),(0,i.yg)("h3",{id:"language-native-functions"},"Language-native functions"),(0,i.yg)("p",null,'"Native" functions are supported in Java and Python, which means a Pulsar Function can have no dependencies.'),(0,i.yg)("p",null,'The benefit of native functions is that they do not have any dependencies beyond what\'s already available in Java/Python "out of the box." The downside is that they do not provide access to the function ',(0,i.yg)("a",{parentName:"p",href:"#function-context"},"context"),", which is necessary for a variety of functionalities, including ",(0,i.yg)("a",{parentName:"p",href:"#logging"},"logging"),", ",(0,i.yg)("a",{parentName:"p",href:"#user-configuration"},"user configuration"),", and more."),(0,i.yg)("h2",{id:"pulsar-functions-sdk"},"Pulsar Functions SDK"),(0,i.yg)("p",null,"To enable a Pulsar Function to access to a ",(0,i.yg)("a",{parentName:"p",href:"#function-context"},"context object"),", you can use ",(0,i.yg)("strong",{parentName:"p"},"Pulsar Functions SDK"),", available for ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-java"},"Java"),", ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-python"},"Python"),", and ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#functions-for-go"},"Go"),"."),(0,i.yg)("h3",{id:"java"},"Java"),(0,i.yg)("p",null,"The following is a Java function example that uses information about its context."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'\nimport org.apache.pulsar.functions.api.Context;\nimport org.apache.pulsar.functions.api.Function;\nimport org.slf4j.Logger;\n\npublic class ContextAwareFunction implements Function<String, Void> {\n    @Override\n    public Void process(String input, Context, context) {\n        Logger LOG = context.getLogger();\n        String functionTenant = context.getTenant();\n        String functionNamespace = context.getNamespace();\n        String functionName = context.getFunctionName();\n        LOG.info("Function tenant/namespace/name: {}/{}/{}", functionTenant, functionNamespace, functionName);\n        return null;\n    }\n}\n\n')),(0,i.yg)("h3",{id:"python"},"Python"),(0,i.yg)("p",null,"The following is a Python function example that uses information about its context."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'\nfrom pulsar import Function\n\nclass ContextAwareFunction(Function):\n    def process(self, input, context):\n        log = context.get_logger()\n        function_tenant = context.get_function_tenant()\n        function_namespace = context.get_function_namespace()\n        function_name = context.get_function_name()\n        log.info("Function tenant/namespace/name: {0}/{1}/{2}".format(function_tenant, function_namespace, function_name))\n\n')),(0,i.yg)("h3",{id:"go"},"Go"),(0,i.yg)("p",null,"The following is a Go function example that uses information about its context."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'\nimport (\n    "context"\n    "fmt"\n\n    "github.com/apache/pulsar/pulsar-function-go/log"\n    "github.com/apache/pulsar/pulsar-function-go/pf"\n)\n\nfunc contextFunc(ctx context.Context) {\n    if fc, ok := pf.FromContext(ctx); ok {\n        tenant := fc.GetFuncTenant()\n        namespace := fc.GetFuncNamespace()\n        name := fc.GetFuncName()\n        log.Info("Function tenant/namespace/name: %s/%s/%s\\n", tenant, namespace, name)\n    }\n}\n\nfunc main() {\n    pf.Start(contextFunc)\n}\n\n')),(0,i.yg)("h2",{id:"deployment"},"Deployment"),(0,i.yg)("p",null,"Pulsar Functions support a variety of deployment options. You can deploy a Pulsar Function in the following ways."),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:"left"},"Deployment mode"),(0,i.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},(0,i.yg)("a",{parentName:"td",href:"#local-run-mode"},"Local run mode")),(0,i.yg)("td",{parentName:"tr",align:"left"},"The function runs in your local environment, for example, on your laptop.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},(0,i.yg)("a",{parentName:"td",href:"#cluster-run-mode"},"Cluster mode")),(0,i.yg)("td",{parentName:"tr",align:"left"},"The function runs ",(0,i.yg)("em",{parentName:"td"},"inside of")," your Pulsar cluster, on the same machines as your Pulsar ",(0,i.yg)("a",{parentName:"td",href:"/docs/2.4.0/reference-terminology#broker"},"brokers"),".")))),(0,i.yg)("h3",{id:"local-run-mode"},"Local run mode"),(0,i.yg)("p",null,"If you run a Pulsar Function in the ",(0,i.yg)("strong",{parentName:"p"},"local run")," mode, you run it on the machine where you run commands(for example, your laptop, an ",(0,i.yg)("a",{parentName:"p",href:"https://aws.amazon.com/ec2/"},"AWS EC2")," instance). The following example is about the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/reference-ulsar-admin#localrun"},(0,i.yg)("inlineCode",{parentName:"a"},"localrun"))," command."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions localrun \\\n  --py myfunc.py \\\n  --classname myfunc.SomeFunction \\\n  --inputs persistent://public/default/input-1 \\\n  --output persistent://public/default/output-1\n\n")),(0,i.yg)("p",null,"By default, the function connects to a Pulsar cluster running on the same machine, via a local broker service URL of ",(0,i.yg)("inlineCode",{parentName:"p"},"pulsar://localhost:6650"),". If you run a function with the local run mode, and connect it to a non-local Pulsar cluster, specify a different broker URL using the ",(0,i.yg)("inlineCode",{parentName:"p"},"--brokerServiceUrl")," flag. The following is an example."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions localrun \\\n  --broker-service-url pulsar://my-cluster-host:6650 \\\n  # Other function parameters\n\n")),(0,i.yg)("h3",{id:"cluster-mode"},"Cluster mode"),(0,i.yg)("p",null,"When you run Pulsar Functions in the ",(0,i.yg)("strong",{parentName:"p"},"cluster mode"),", the function code is uploaded to a Pulsar broker and runs ",(0,i.yg)("em",{parentName:"p"},"alongside the broker")," rather than in your ",(0,i.yg)("a",{parentName:"p",href:"#local-run-mode"},"local environment"),". You can run a function in the cluster mode using the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/reference-ulsar-admin#create-1"},(0,i.yg)("inlineCode",{parentName:"a"},"create"))," command.  The following is an example."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --py myfunc.py \\\n  --classname myfunc.SomeFunction \\\n  --inputs persistent://public/default/input-1 \\\n  --output persistent://public/default/output-1\n\n")),(0,i.yg)("p",null,"This command uploads ",(0,i.yg)("inlineCode",{parentName:"p"},"myfunc.py")," to Pulsar, which uses the code to start one ",(0,i.yg)("a",{parentName:"p",href:"#parallelism"},"or more")," instances of the function."),(0,i.yg)("h3",{id:"run-instances-in-parallel"},"Run instances in parallel"),(0,i.yg)("p",null,"When you create Pulsar Functions and run in the ",(0,i.yg)("a",{parentName:"p",href:"#cluster-mode"},"cluster mode"),", only one ",(0,i.yg)("strong",{parentName:"p"},"instance")," of Pulsar Functions is running by default. However, you can run multiple instances in parallel. Specify the number of instances when you create Pulsar Functions, or update an existing single-instance function with a new parallel factor."),(0,i.yg)("p",null,"This command, for example, creates and runs a function with 5 instances in parallel."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --name parallel-fun \\\n  --tenant public \\\n  --namespace default \\\n  --py func.py \\\n  --classname func.ParallelFunction \\\n  --parallelism 5\n\n")),(0,i.yg)("h3",{id:"function-instance-resources"},"Function instance resources"),(0,i.yg)("p",null,"When you run Pulsar Functions in the ",(0,i.yg)("a",{parentName:"p",href:"#cluster-mode"},"cluster mode"),", you can specify the resources that are assigned to each function ",(0,i.yg)("a",{parentName:"p",href:"#run-instances-in-parallel"},"instance"),"."),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:"left"},"Resource"),(0,i.yg)("th",{parentName:"tr",align:"left"},"Specified as..."),(0,i.yg)("th",{parentName:"tr",align:"left"},"Runtimes"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},"CPU"),(0,i.yg)("td",{parentName:"tr",align:"left"},"The number of cores"),(0,i.yg)("td",{parentName:"tr",align:"left"},"Docker (coming soon)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},"RAM"),(0,i.yg)("td",{parentName:"tr",align:"left"},"The number of bytes"),(0,i.yg)("td",{parentName:"tr",align:"left"},"Process, Docker")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},"Disk space"),(0,i.yg)("td",{parentName:"tr",align:"left"},"The number of bytes"),(0,i.yg)("td",{parentName:"tr",align:"left"},"Docker")))),(0,i.yg)("p",null,"The following example allocates 8 cores, 8 GB of RAM, and 10 GB of disk space to a function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --jar target/my-functions.jar \\\n  --classname org.example.functions.MyFunction \\\n  --cpu 8 \\\n  --ram 8589934592 \\\n  --disk 10737418240\n\n")),(0,i.yg)("p",null,"For more information on resources, see the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-deploying#resources"},"Deploying and Managing Pulsar Functions")," documentation."),(0,i.yg)("h3",{id:"logging"},"Logging"),(0,i.yg)("p",null,"Pulsar Functions created using ",(0,i.yg)("a",{parentName:"p",href:"#the-pulsar-functions-sdk"},"Pulsar Functions SDK")," can send logs to a log topic that you specify as part of the function configuration. The function created using the following command produces all logs on the ",(0,i.yg)("inlineCode",{parentName:"p"},"persistent://public/default/my-func-1-log")," topic."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --name my-func-1 \\\n  --log-topic persistent://public/default/my-func-1-log \\\n  # Other configs\n\n")),(0,i.yg)("p",null,"The following is an example of ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#java-logging"},"Java function")," that logs at different log levels based on the function input."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'\npublic class LoggerFunction implements Function<String, Void> {\n    @Override\n    public Void process(String input, Context context) {\n        Logger LOG = context.getLogger();\n        if (input.length() <= 100) {\n            LOG.info("This string has a length of {}", input);\n        } else {\n            LOG.warn("This string is getting too long! It has {} characters", input);\n        }\n    }\n}\n\n')),(0,i.yg)("p",null,"The following is an example of ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#go-logging"},"Go function")," that logs at different log levels based on the function input."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'\nimport (\n    "context"\n\n    "github.com/apache/pulsar/pulsar-function-go/log"\n    "github.com/apache/pulsar/pulsar-function-go/pf"\n)\n\nfunc loggerFunc(ctx context.Context, input []byte) {\n    if len(input) <= 100 {\n        log.Infof("This input has a length of: %d", len(input))\n    } else {\n        log.Warnf("This input is getting too long! It has {%d} characters", len(input))\n    }\n}\n\nfunc main() {\n    pf.Start(loggerFunc)\n}\n\n')),(0,i.yg)("p",null,"When you use ",(0,i.yg)("inlineCode",{parentName:"p"},"logTopic")," related functionalities in Go Function, import ",(0,i.yg)("inlineCode",{parentName:"p"},"github.com/apache/pulsar/pulsar-function-go/log"),", and you do not have to use the ",(0,i.yg)("inlineCode",{parentName:"p"},"getLogger()")," context object. The approach is different from Java Function and Python Function."),(0,i.yg)("h3",{id:"user-configuration"},"User configuration"),(0,i.yg)("p",null,"You can pass arbitrary key-values to Pulsar Functions via the command line (both keys and values must be string). This set of key-values is called the functions ",(0,i.yg)("strong",{parentName:"p"},"user configuration"),". User configuration must consist of JSON strings."),(0,i.yg)("p",null,"The following example passes user configuration to a function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'\n$ bin/pulsar-admin functions create \\\n  --user-config \'{"key-1":"value-1","key-2","value-2"}\' \\\n  # Other configs\n\n')),(0,i.yg)("p",null,"The following example accesses that configuration map."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'\npublic class ConfigMapFunction implements Function<String, Void> {\n    @Override\n    public Void process(String input, Context context) {\n        String val1 = context.getUserConfigValue("key1").get();\n        String val2 = context.getUserConfigValue("key2").get();\n        context.getLogger().info("The user-supplied values are {} and {}", val1, val2);\n        return null;\n    }\n}\n\n')),(0,i.yg)("h3",{id:"trigger-pulsar-functions"},"Trigger Pulsar Functions"),(0,i.yg)("p",null,"You can ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-deploying#triggering-pulsar-functions"},"trigger")," a Pulsar Function running in the ",(0,i.yg)("a",{parentName:"p",href:"#cluster-mode"},"cluster mode")," with the ",(0,i.yg)("a",{parentName:"p",href:"#command-line-interface"},"command line"),". When triggering a Pulsar Function, you can pass a specific value to the Function and get the return value ",(0,i.yg)("em",{parentName:"p"},"without")," creating a client. Triggering is useful for, but not limited to, testing and debugging purposes."),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"Triggering a function is no different from invoking a function by producing a message on one of the function input topics. The ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/reference-ulsar-admin#trigger"},(0,i.yg)("inlineCode",{parentName:"a"},"pulsar-admin functions trigger"))," command is a convenient mechanism for sending messages to functions without using the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/reference-cli-tools#pulsar-client"},(0,i.yg)("inlineCode",{parentName:"a"},"pulsar-client"))," tool or a language-specific client library.")),(0,i.yg)("p",null,"The following is an example of Pulsar Functions written in Python (using the ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#python-native-functions"},"native interface"),") that simply reverses string inputs."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"\ndef process(input):\n    return input[::-1]\n\n")),(0,i.yg)("p",null,"If the function is running in a Pulsar cluster, you can trigger it with the following commands."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'\n$ bin/pulsar-admin functions trigger \\\n  --tenant public \\\n  --namespace default \\\n  --name reverse-func \\\n  --trigger-value "snoitcnuf raslup ot emoclew"\n\n')),(0,i.yg)("p",null,"And then ",(0,i.yg)("inlineCode",{parentName:"p"},"welcome to Pulsar Functions")," is displayed in the console output."),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"Instead of passing a string via the CLI, you can trigger Pulsar Functions with the contents of a file using the ",(0,i.yg)("inlineCode",{parentName:"p"},"--triggerFile")," flag.")),(0,i.yg)("h2",{id:"processing-guarantees"},"Processing guarantees"),(0,i.yg)("p",null,"Pulsar Functions provide three different messaging semantics that you can apply to any function."),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:"left"},"Delivery semantics"),(0,i.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},(0,i.yg)("strong",{parentName:"td"},"At-most-once")," delivery"),(0,i.yg)("td",{parentName:"tr",align:"left"},'Each message sent to the function is likely to be processed, or not to be processed (hence "at most").')),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},(0,i.yg)("strong",{parentName:"td"},"At-least-once")," delivery"),(0,i.yg)("td",{parentName:"tr",align:"left"},'Each message sent to the function can be processed more than once (hence the "at least").')),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"left"},(0,i.yg)("strong",{parentName:"td"},"Effectively-once")," delivery"),(0,i.yg)("td",{parentName:"tr",align:"left"},"Each message sent to the function will have one output associated with it.")))),(0,i.yg)("p",null,"This command, for example, runs a function in the ",(0,i.yg)("a",{parentName:"p",href:"#cluster-mode"},"cluster mode")," with effectively-once guarantees applied."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"\n$ bin/pulsar-admin functions create \\\n  --name my-effectively-once-function \\\n  --processing-guarantees EFFECTIVELY_ONCE \\\n  # Other function configs\n\n")),(0,i.yg)("h2",{id:"metrics"},"Metrics"),(0,i.yg)("p",null,"Pulsar Functions that use ",(0,i.yg)("a",{parentName:"p",href:"#the-pulsar-functions-sdk"},"Pulsar Functions SDK")," can publish metrics to Pulsar. For more information, see ",(0,i.yg)("a",{parentName:"p",href:"/docs/2.4.0/functions-metrics"},"Metrics for Pulsar Functions"),"."),(0,i.yg)("h2",{id:"state-storage"},"State storage"),(0,i.yg)("p",null,"Pulsar Functions use ",(0,i.yg)("a",{parentName:"p",href:"https://bookkeeper.apache.org"},"Apache BookKeeper")," as a state storage interface. Pulsar installation, including the local standalone installation, includes deployment of BookKeeper bookies."))}g.isMDXComponent=!0},92086:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/pulsar-functions-overview-9d39ad7e0ec566e6ed2ee7cdf9717963.png"},14160:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/pulsar-functions-routing-example-22b3f2b036505ad4d4dfd5f878de3ae3.png"},93285:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/pulsar-functions-word-count-f7b0d99f0a0e03e0b20fd0aa0ff6ef48.png"}}]);