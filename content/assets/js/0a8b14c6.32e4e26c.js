"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[40456],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>d});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),p=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},m=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),g=p(t),u=r,d=g["".concat(o,".").concat(u)]||g[u]||c[u]||l;return t?n.createElement(d,i(i({ref:a},m),{},{components:t})):n.createElement(d,i({ref:a},m))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[g]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},19365:(e,a,t)=>{t.d(a,{A:()=>i});var n=t(96540),r=t(20053);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:a,hidden:t,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,i),hidden:t},a)}},89089:(e,a,t)=>{t.d(a,{A:()=>S});var n=t(58168),r=t(96540),l=t(20053),i=t(23104),s=t(56347),o=t(57485),p=t(31682),m=t(89466);function g(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function c(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??g(t);return function(e){const a=(0,p.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function u(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function d(e){let{queryString:a=!1,groupId:t}=e;const n=(0,s.W6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,o.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(n.location.search);a.set(l,e),n.replace({...n.location,search:a.toString()})}),[l,n])]}function y(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,l=c(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!u({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:l}))),[o,p]=d({queryString:t,groupId:n}),[g,y]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,l]=(0,m.Dv)(t);return[n,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:n}),h=(()=>{const e=o??g;return u({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var h=t(92303);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:a,block:t,selectedValue:s,selectValue:o,tabValues:p}=e;const m=[],{blockElementScrollPositionUntilNextRender:g}=(0,i.a_)(),c=e=>{const a=e.currentTarget,t=m.indexOf(a),n=p[t].value;n!==s&&(g(a),o(n))},u=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;a=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;a=m[t]??m[m.length-1];break}}a?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},a)},p.map((e=>{let{value:a,label:t,attributes:i}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>m.push(e),onKeyDown:u,onClick:c},i,{className:(0,l.A)("tabs__item",N.tabItem,i?.className,{"tabs__item--active":s===a})}),t??a)})))}function f(e){let{lazy:a,children:t,selectedValue:n}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function v(e){const a=y(e);return r.createElement("div",{className:(0,l.A)("tabs-container",N.tabList)},r.createElement(b,(0,n.A)({},e,a)),r.createElement(f,(0,n.A)({},e,a)))}function S(e){const a=(0,h.A)();return r.createElement(v,(0,n.A)({key:String(a)},e))}},24911:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>g});var n=t(58168),r=(t(96540),t(15680)),l=t(89089),i=t(19365);const s={id:"schema-understand",title:"Understand schema",sidebar_label:"Understand schema",original_id:"schema-understand"},o=void 0,p={unversionedId:"schema-understand",id:"version-2.9.x/schema-understand",title:"Understand schema",description:"This chapter explains the basic concepts of Pulsar schema, focuses on the topics of particular importance, and provides additional background.",source:"@site/versioned_docs/version-2.9.x/schema-understand.md",sourceDirName:".",slug:"/schema-understand",permalink:"/docs/2.9.x/schema-understand",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.9.x/schema-understand.md",tags:[],version:"2.9.x",frontMatter:{id:"schema-understand",title:"Understand schema",sidebar_label:"Understand schema",original_id:"schema-understand"},sidebar:"version-2.9.x/docsSidebar",previous:{title:"Get started",permalink:"/docs/2.9.x/schema-get-started"},next:{title:"Schema evolution and compatibility",permalink:"/docs/2.9.x/schema-evolution-compatibility"}},m={},g=[{value:"SchemaInfo",id:"schemainfo",level:2},{value:"Schema type",id:"schema-type",level:2},{value:"Primitive type",id:"primitive-type",level:3},{value:"Complex type",id:"complex-type",level:3},{value:"keyvalue",id:"keyvalue",level:4},{value:"struct",id:"struct",level:4},{value:"Type",id:"type",level:5},{value:"Usage",id:"usage",level:5},{value:"Auto Schema",id:"auto-schema",level:3},{value:"AUTO_PRODUCE",id:"auto_produce",level:4},{value:"AUTO_CONSUME",id:"auto_consume",level:4},{value:"Native Avro Schema",id:"native-avro-schema",level:3},{value:"Schema version",id:"schema-version",level:2},{value:"How does schema work",id:"how-does-schema-work",level:2},{value:"Producer side",id:"producer-side",level:3},{value:"Consumer side",id:"consumer-side",level:3}],c={toc:g},u="wrapper";function d(e){let{components:a,...s}=e;return(0,r.yg)(u,(0,n.A)({},c,s,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This chapter explains the basic concepts of Pulsar schema, focuses on the topics of particular importance, and provides additional background."),(0,r.yg)("h2",{id:"schemainfo"},"SchemaInfo"),(0,r.yg)("p",null,"Pulsar schema is defined in a data structure called ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo"),"."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," is stored and enforced on a per-topic basis and cannot be stored at the namespace or tenant level."),(0,r.yg)("p",null,"A ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," consists of the following fields:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Field"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name")),(0,r.yg)("td",{parentName:"tr",align:null},"Schema name (a string).")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"type")),(0,r.yg)("td",{parentName:"tr",align:null},"Schema type, which determines how to interpret the schema data. ",(0,r.yg)("li",null,"Predefined schema: see ",(0,r.yg)("a",{parentName:"td",href:"/docs/2.9.x/schema-understand#schema-type"},"here"),". "),(0,r.yg)("li",null,"Customized schema: it is left as an empty string. "))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"schema"),"\uff08",(0,r.yg)("inlineCode",{parentName:"td"},"payload"),")"),(0,r.yg)("td",{parentName:"tr",align:null},"Schema data, which is a sequence of 8-bit unsigned bytes and schema-type specific.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"properties")),(0,r.yg)("td",{parentName:"tr",align:null},"It is a user defined properties as a string/string map. Applications can use this bag for carrying any application specific logics. Possible properties might be the Git hash associated with the schema, an environment string like ",(0,r.yg)("inlineCode",{parentName:"td"},"dev")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"prod"),".")))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"This is the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," of a string."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'\n{\n    "name": "test-string-schema",\n    "type": "STRING",\n    "schema": "",\n    "properties": {}\n}\n\n')),(0,r.yg)("h2",{id:"schema-type"},"Schema type"),(0,r.yg)("p",null,"Pulsar supports various schema types, which are mainly divided into two categories:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Primitive type")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Complex type"))),(0,r.yg)("h3",{id:"primitive-type"},"Primitive type"),(0,r.yg)("p",null,"Currently, Pulsar supports the following primitive types:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Primitive Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"BOOLEAN")),(0,r.yg)("td",{parentName:"tr",align:null},"A binary value")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"INT8")),(0,r.yg)("td",{parentName:"tr",align:null},"A 8-bit signed integer")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"INT16")),(0,r.yg)("td",{parentName:"tr",align:null},"A 16-bit signed integer")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"INT32")),(0,r.yg)("td",{parentName:"tr",align:null},"A 32-bit signed integer")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"INT64")),(0,r.yg)("td",{parentName:"tr",align:null},"A 64-bit signed integer")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"FLOAT")),(0,r.yg)("td",{parentName:"tr",align:null},"A single precision (32-bit) IEEE 754 floating-point number")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"DOUBLE")),(0,r.yg)("td",{parentName:"tr",align:null},"A double-precision (64-bit) IEEE 754 floating-point number")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"BYTES")),(0,r.yg)("td",{parentName:"tr",align:null},"A sequence of 8-bit unsigned bytes")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"STRING")),(0,r.yg)("td",{parentName:"tr",align:null},"A Unicode character sequence")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TIMESTAMP")," (",(0,r.yg)("inlineCode",{parentName:"td"},"DATE"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"TIME"),")"),(0,r.yg)("td",{parentName:"tr",align:null},"A logic type represents a specific instant in time with millisecond precision. ",(0,r.yg)("br",null),"It stores the number of milliseconds since ",(0,r.yg)("inlineCode",{parentName:"td"},"January 1, 1970, 00:00:00 GMT")," as an ",(0,r.yg)("inlineCode",{parentName:"td"},"INT64")," value")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"INSTANT"),(0,r.yg)("td",{parentName:"tr",align:null},"A single instantaneous point on the time-line with nanoseconds precision")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"LOCAL_DATE"),(0,r.yg)("td",{parentName:"tr",align:null},"An immutable date-time object that represents a date, often viewed as year-month-day")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"LOCAL_TIME"),(0,r.yg)("td",{parentName:"tr",align:null},"An immutable date-time object that represents a time, often viewed as hour-minute-second. Time is represented to nanosecond precision.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"LOCAL_DATE_TIME"),(0,r.yg)("td",{parentName:"tr",align:null},"An immutable date-time object that represents a date-time, often viewed as year-month-day-hour-minute-second")))),(0,r.yg)("p",null,"For primitive types, Pulsar does not store any schema data in ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo"),". The ",(0,r.yg)("inlineCode",{parentName:"p"},"type")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," is used to determine how to serialize and deserialize the data."),(0,r.yg)("p",null,"Some of the primitive schema implementations can use ",(0,r.yg)("inlineCode",{parentName:"p"},"properties")," to store implementation-specific tunable settings. For example, a ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," schema can use ",(0,r.yg)("inlineCode",{parentName:"p"},"properties")," to store the encoding charset to serialize and deserialize strings."),(0,r.yg)("p",null,"The conversions between ",(0,r.yg)("strong",{parentName:"p"},"Pulsar schema types")," and ",(0,r.yg)("strong",{parentName:"p"},"language-specific primitive types")," are as below."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Java Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Python Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Go Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,r.yg)("td",{parentName:"tr",align:null},"boolean"),(0,r.yg)("td",{parentName:"tr",align:null},"bool"),(0,r.yg)("td",{parentName:"tr",align:null},"bool")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"INT8"),(0,r.yg)("td",{parentName:"tr",align:null},"byte"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"int8")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"INT16"),(0,r.yg)("td",{parentName:"tr",align:null},"short"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"int16")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"INT32"),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"int32")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"INT64"),(0,r.yg)("td",{parentName:"tr",align:null},"long"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"int64")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"FLOAT"),(0,r.yg)("td",{parentName:"tr",align:null},"float"),(0,r.yg)("td",{parentName:"tr",align:null},"float"),(0,r.yg)("td",{parentName:"tr",align:null},"float32")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"DOUBLE"),(0,r.yg)("td",{parentName:"tr",align:null},"double"),(0,r.yg)("td",{parentName:"tr",align:null},"float"),(0,r.yg)("td",{parentName:"tr",align:null},"float64")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"BYTES"),(0,r.yg)("td",{parentName:"tr",align:null},"byte[], ByteBuffer, ByteBuf"),(0,r.yg)("td",{parentName:"tr",align:null},"bytes"),(0,r.yg)("td",{parentName:"tr",align:null},"[]byte")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"STRING"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"str"),(0,r.yg)("td",{parentName:"tr",align:null},"string")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.yg)("td",{parentName:"tr",align:null},"java.sql.Timestamp"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TIME"),(0,r.yg)("td",{parentName:"tr",align:null},"java.sql.Time"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"DATE"),(0,r.yg)("td",{parentName:"tr",align:null},"java.util.Date"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"INSTANT"),(0,r.yg)("td",{parentName:"tr",align:null},"java.time.Instant"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"LOCAL_DATE"),(0,r.yg)("td",{parentName:"tr",align:null},"java.time.LocalDate"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"LOCAL_TIME"),(0,r.yg)("td",{parentName:"tr",align:null},"java.time.LocalDateTime"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"LOCAL_DATE_TIME"),(0,r.yg)("td",{parentName:"tr",align:null},"java.time.LocalTime"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"This example demonstrates how to use a string schema."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a producer with a string schema and send messages."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nProducer<String> producer = client.newProducer(Schema.STRING).create();\nproducer.newMessage().value("Hello Pulsar!").send();\n\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a consumer with a string schema and receive messages."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nConsumer<String> consumer = client.newConsumer(Schema.STRING).subscribe();\nconsumer.receive();\n\n")))),(0,r.yg)("h3",{id:"complex-type"},"Complex type"),(0,r.yg)("p",null,"Currently, Pulsar supports the following complex types:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Complex Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"keyvalue")),(0,r.yg)("td",{parentName:"tr",align:null},"Represents a complex type of a key/value pair.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"struct")),(0,r.yg)("td",{parentName:"tr",align:null},"Handles structured data. It supports ",(0,r.yg)("inlineCode",{parentName:"td"},"AvroBaseStructSchema")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"ProtobufNativeSchema"),".")))),(0,r.yg)("h4",{id:"keyvalue"},"keyvalue"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Keyvalue")," schema helps applications define schemas for both key and value."),(0,r.yg)("p",null,"For ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," of ",(0,r.yg)("inlineCode",{parentName:"p"},"keyvalue")," schema, Pulsar stores the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," of key schema and the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," of value schema together."),(0,r.yg)("p",null,"Pulsar provides the following methods to encode a key/value pair in messages\uff1a"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"INLINE"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"SEPARATED")))),(0,r.yg)("p",null,"You can choose the encoding type when constructing the key/value schema."),(0,r.yg)(l.A,{defaultValue:"INLINE",values:[{label:"INLINE",value:"INLINE"},{label:"SEPARATED",value:"SEPARATED"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"INLINE",mdxType:"TabItem"},(0,r.yg)("p",null,"Key/value pairs are encoded together in the message payload.")),(0,r.yg)(i.A,{value:"SEPARATED",mdxType:"TabItem"},(0,r.yg)("p",null,"Key is encoded in the message key and the value is encoded in the message payload."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"This example shows how to construct a key/value schema and then use it to produce and consume messages."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Construct a key/value schema with ",(0,r.yg)("inlineCode",{parentName:"p"},"INLINE")," encoding type."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nSchema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\nSchema.INT32,\nSchema.STRING,\nKeyValueEncodingType.INLINE\n);\n\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Optionally, construct a key/value schema with ",(0,r.yg)("inlineCode",{parentName:"p"},"SEPARATED")," encoding type."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nSchema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\nSchema.INT32,\nSchema.STRING,\nKeyValueEncodingType.SEPARATED\n);\n\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Produce messages using a key/value schema."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nSchema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\nSchema.INT32,\nSchema.STRING,\nKeyValueEncodingType.SEPARATED\n);\n\nProducer<KeyValue<Integer, String>> producer = client.newProducer(kvSchema)\n    .topic(TOPIC)\n    .create();\n\nfinal int key = 100;\nfinal String value = "value-100";\n\n// send the key/value message\nproducer.newMessage()\n.value(new KeyValue(key, value))\n.send();\n\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Consume messages using a key/value schema."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nSchema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\nSchema.INT32,\nSchema.STRING,\nKeyValueEncodingType.SEPARATED\n);\n\nConsumer<KeyValue<Integer, String>> consumer = client.newConsumer(kvSchema)\n    ...\n    .topic(TOPIC)\n    .subscriptionName(SubscriptionName).subscribe();\n\n// receive key/value pair\nMessage<KeyValue<Integer, String>> msg = consumer.receive();\nKeyValue<Integer, String> kv = msg.getValue();\n\n")))))),(0,r.yg)("h4",{id:"struct"},"struct"),(0,r.yg)("p",null,"This section describes the details of type and usage of the ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema."),(0,r.yg)("h5",{id:"type"},"Type"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema supports ",(0,r.yg)("inlineCode",{parentName:"p"},"AvroBaseStructSchema")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"ProtobufNativeSchema"),"."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"AvroBaseStructSchema")),(0,r.yg)("td",{parentName:"tr",align:null},"Pulsar uses ",(0,r.yg)("a",{parentName:"td",href:"http://avro.apache.org/docs/current/spec.html"},"Avro Specification")," to declare the schema definition for ",(0,r.yg)("inlineCode",{parentName:"td"},"AvroBaseStructSchema"),", which supports  ",(0,r.yg)("inlineCode",{parentName:"td"},"AvroSchema"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"JsonSchema"),", and ",(0,r.yg)("inlineCode",{parentName:"td"},"ProtobufSchema"),". ",(0,r.yg)("br",null),(0,r.yg)("br",null),"This allows Pulsar:",(0,r.yg)("br",null),"- to use the same tools to manage schema definitions",(0,r.yg)("br",null),"- to use different serialization or deserialization methods to handle data")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"ProtobufNativeSchema")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"ProtobufNativeSchema")," is based on protobuf native Descriptor. ",(0,r.yg)("br",null),(0,r.yg)("br",null),"This allows Pulsar:",(0,r.yg)("br",null),"- to use native protobuf-v3 to serialize or deserialize data",(0,r.yg)("br",null),"- to use ",(0,r.yg)("inlineCode",{parentName:"td"},"AutoConsume")," to deserialize data.")))),(0,r.yg)("h5",{id:"usage"},"Usage"),(0,r.yg)("p",null,"Pulsar provides the following methods to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"static"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"generic"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"SchemaDefinition")))),(0,r.yg)(l.A,{defaultValue:"static",values:[{label:"static",value:"static"},{label:"generic",value:"generic"},{label:"SchemaDefinition",value:"SchemaDefinition"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"static",mdxType:"TabItem"},(0,r.yg)("p",null,"You can predefine the ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema, which can be a POJO in Java, a ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," in Go, or classes generated by Avro or Protobuf tools."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"Pulsar gets the schema definition from the predefined ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," using an Avro library. The schema definition is the schema data stored as a part of the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo"),"."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create the ",(0,r.yg)("em",{parentName:"p"},"User")," class to define the messages sent to Pulsar topics."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic static class User {\n    String name;\n    int age;\n}\n\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a producer with a ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema and send messages."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nProducer<User> producer = client.newProducer(Schema.AVRO(User.class)).create();\nproducer.newMessage().value(User.builder().name("pulsar-user").age(1).build()).send();\n\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a consumer with a ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema and receive messages"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nConsumer<User> consumer = client.newConsumer(Schema.AVRO(User.class)).subscribe();\nUser user = consumer.receive();\n\n"))))),(0,r.yg)(i.A,{value:"generic",mdxType:"TabItem"},(0,r.yg)("p",null,"Sometimes applications do not have pre-defined structs, and you can use this method to define schema and access data."),(0,r.yg)("p",null,"You can define the ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema using the ",(0,r.yg)("inlineCode",{parentName:"p"},"GenericSchemaBuilder"),", generate a generic struct using ",(0,r.yg)("inlineCode",{parentName:"p"},"GenericRecordBuilder")," and consume messages into ",(0,r.yg)("inlineCode",{parentName:"p"},"GenericRecord"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"RecordSchemaBuilder")," to build a schema."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nRecordSchemaBuilder recordSchemaBuilder = SchemaBuilder.record("schemaName");\nrecordSchemaBuilder.field("intField").type(SchemaType.INT32);\nSchemaInfo schemaInfo = recordSchemaBuilder.build(SchemaType.AVRO);\n\nProducer<GenericRecord> producer = client.newProducer(Schema.generic(schemaInfo)).create();\n\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"RecordBuilder")," to build the struct records."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nproducer.newMessage().value(schema.newRecordBuilder()\n            .set("intField", 32)\n            .build()).send();\n\n'))))),(0,r.yg)(i.A,{value:"SchemaDefinition",mdxType:"TabItem"},(0,r.yg)("p",null,"You can define the ",(0,r.yg)("inlineCode",{parentName:"p"},"schemaDefinition")," to generate a ",(0,r.yg)("inlineCode",{parentName:"p"},"struct")," schema."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create the ",(0,r.yg)("em",{parentName:"p"},"User")," class to define the messages sent to Pulsar topics."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic static class User {\n    String name;\n    int age;\n}\n\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a producer with a ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaDefinition")," and send messages."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nSchemaDefinition<User> schemaDefinition = SchemaDefinition.<User>builder().withPojo(User.class).build();\nProducer<User> producer = client.newProducer(Schema.AVRO(schemaDefinition)).create();\nproducer.newMessage().value(User.builder().name("pulsar-user").age(1).build()).send();\n\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a consumer with a ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaDefinition")," schema and receive messages"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nSchemaDefinition<User> schemaDefinition = SchemaDefinition.<User>builder().withPojo(User.class).build();\nConsumer<User> consumer = client.newConsumer(Schema.AVRO(schemaDefinition)).subscribe();\nUser user = consumer.receive().getValue();\n\n")))))),(0,r.yg)("h3",{id:"auto-schema"},"Auto Schema"),(0,r.yg)("p",null,"If you don't know the schema type of a Pulsar topic in advance, you can use AUTO schema to produce or consume generic records to or from brokers."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Auto Schema Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"AUTO_PRODUCE")),(0,r.yg)("td",{parentName:"tr",align:null},"This is useful for transferring data ",(0,r.yg)("strong",{parentName:"td"},"from a producer to a Pulsar topic that has a schema"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"AUTO_CONSUME")),(0,r.yg)("td",{parentName:"tr",align:null},"This is useful for transferring data ",(0,r.yg)("strong",{parentName:"td"},"from a Pulsar topic that has a schema to a consumer"),".")))),(0,r.yg)("h4",{id:"auto_produce"},"AUTO_PRODUCE"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"AUTO_PRODUCE")," schema helps a producer validate whether the bytes sent by the producer is compatible with the schema of a topic."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"Suppose that:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"You have a producer processing messages from a Kafka topic ",(0,r.yg)("em",{parentName:"p"},"K"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"You have a Pulsar topic ",(0,r.yg)("em",{parentName:"p"},"P"),", and you do not know its schema type.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Your application reads the messages from ",(0,r.yg)("em",{parentName:"p"},"K")," and writes the messages to ",(0,r.yg)("em",{parentName:"p"},"P"),"."))),(0,r.yg)("p",null,"In this case, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"AUTO_PRODUCE")," to verify whether the bytes produced by ",(0,r.yg)("em",{parentName:"p"},"K")," can be sent to ",(0,r.yg)("em",{parentName:"p"},"P")," or not."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nProduce<byte[]> pulsarProducer = client.newProducer(Schema.AUTO_PRODUCE())\n    \u2026\n    .create();\n\nbyte[] kafkaMessageBytes = \u2026 ;\n\npulsarProducer.produce(kafkaMessageBytes);\n\n")),(0,r.yg)("h4",{id:"auto_consume"},"AUTO_CONSUME"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"AUTO_CONSUME")," schema helps a Pulsar topic validate whether the bytes sent by a Pulsar topic is compatible with a consumer, that is, the Pulsar topic deserializes messages into language-specific objects using the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," retrieved from broker-side."),(0,r.yg)("p",null,"Currently, ",(0,r.yg)("inlineCode",{parentName:"p"},"AUTO_CONSUME")," supports AVRO, JSON and ProtobufNativeSchema schemas. It deserializes messages into ",(0,r.yg)("inlineCode",{parentName:"p"},"GenericRecord"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"Suppose that:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"You have a Pulsar topic ",(0,r.yg)("em",{parentName:"p"},"P"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"You have a consumer (for example, MySQL) receiving messages from the topic ",(0,r.yg)("em",{parentName:"p"},"P"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Your application reads the messages from ",(0,r.yg)("em",{parentName:"p"},"P")," and writes the messages to MySQL."))),(0,r.yg)("p",null,"In this case, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"AUTO_CONSUME")," to verify whether the bytes produced by ",(0,r.yg)("em",{parentName:"p"},"P")," can be sent to MySQL or not."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\nConsumer<GenericRecord> pulsarConsumer = client.newConsumer(Schema.AUTO_CONSUME())\n    \u2026\n    .subscribe();\n\nMessage<GenericRecord> msg = consumer.receive() ;\nGenericRecord record = msg.getValue();\n\n")),(0,r.yg)("h3",{id:"native-avro-schema"},"Native Avro Schema"),(0,r.yg)("p",null,"When migrating or ingesting event or message data from external systems (such as Kafka and Cassandra), the events are often already serialized in Avro format. The applications producing the data typically have validated the data against their schemas (including compatibility checks) and stored them in a database or a dedicated service (such as a schema registry). The schema of each serialized data record is usually retrievable by some metadata attached to that record. In such cases, a Pulsar producer doesn't need to repeat the schema validation step when sending the ingested events to a topic. All it needs to do is passing each message or event with its schema to Pulsar."),(0,r.yg)("p",null,"Hence, we provide ",(0,r.yg)("inlineCode",{parentName:"p"},"Schema.NATIVE_AVRO")," to wrap a native Avro schema of type ",(0,r.yg)("inlineCode",{parentName:"p"},"org.apache.avro.Schema"),". The result is a schema instance of Pulsar that accepts a serialized Avro payload without validating it against the wrapped Avro schema."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\norg.apache.avro.Schema nativeAvroSchema = \u2026 ;\n\nProducer<byte[]> producer = pulsarClient.newProducer().topic("ingress").create();\n\nbyte[] content = \u2026 ;\n\nproducer.newMessage(Schema.NATIVE_AVRO(nativeAvroSchema)).value(content).send();\n\n')),(0,r.yg)("h2",{id:"schema-version"},"Schema version"),(0,r.yg)("p",null,"Each ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," stored with a topic has a version. Schema version manages schema changes happening within a topic."),(0,r.yg)("p",null,"Messages produced with a given ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," is tagged with a schema version, so when a message is consumed by a Pulsar client, the Pulsar client can use the schema version to retrieve the corresponding ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," and then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," to deserialize data."),(0,r.yg)("p",null,"Schemas are versioned in succession. Schema storage happens in a broker that handles the associated topics so that version assignments can be made."),(0,r.yg)("p",null,"Once a version is assigned/fetched to/for a schema, all subsequent messages produced by that producer are tagged with the appropriate version."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")),(0,r.yg)("p",null,"The following example illustrates how the schema version works."),(0,r.yg)("p",null,"Suppose that a Pulsar ",(0,r.yg)("a",{parentName:"p",href:"/docs/2.9.x/client-libraries-java"},"Java client")," created using the code below attempts to connect to Pulsar and begins to send messages:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\nPulsarClient client = PulsarClient.builder()\n        .serviceUrl("pulsar://localhost:6650")\n        .build();\n\nProducer<SensorReading> producer = client.newProducer(JSONSchema.of(SensorReading.class))\n        .topic("sensor-data")\n        .sendTimeout(3, TimeUnit.SECONDS)\n        .create();\n\n')),(0,r.yg)("p",null,"The table below lists the possible scenarios when this connection attempt occurs and what happens in each scenario:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Scenario"),(0,r.yg)("th",{parentName:"tr",align:null},"What happens"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("li",null,"No schema exists for the topic. ")),(0,r.yg)("td",{parentName:"tr",align:null},"(1) The producer is created using the given schema. (2) Since no existing schema is compatible with the ",(0,r.yg)("inlineCode",{parentName:"td"},"SensorReading")," schema, the schema is transmitted to the broker and stored. (3) Any consumer created using the same schema or topic can consume messages from the ",(0,r.yg)("inlineCode",{parentName:"td"},"sensor-data")," topic.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("li",null,"A schema already exists. "),(0,r.yg)("li",null,"The producer connects using the same schema that is already stored. ")),(0,r.yg)("td",{parentName:"tr",align:null},"(1) The schema is transmitted to the broker. (2) The broker determines that the schema is compatible. (3) The broker attempts to store the schema in ",(0,r.yg)("a",{parentName:"td",href:"/docs/2.9.x/concepts-architecture-overview#persistent-storage"},"BookKeeper")," but then determines that it's already stored, so it is used to tag produced messages.")))),(0,r.yg)("h2",{id:"how-does-schema-work"},"How does schema work"),(0,r.yg)("p",null,"Pulsar schemas are applied and enforced at the ",(0,r.yg)("strong",{parentName:"p"},"topic")," level (schemas cannot be applied at the namespace or tenant level)."),(0,r.yg)("p",null,"Producers and consumers upload schemas to brokers, so Pulsar schemas work on the producer side and the consumer side."),(0,r.yg)("h3",{id:"producer-side"},"Producer side"),(0,r.yg)("p",null,"This diagram illustrates how does schema work on the Producer side."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Schema works at the producer side",src:t(17431).A,width:"1278",height:"1228"})),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The application uses a schema instance to construct a producer instance."),(0,r.yg)("p",{parentName:"li"},"The schema instance defines the schema for the data being produced using the producer instance."),(0,r.yg)("p",{parentName:"li"},"Take AVRO as an example, Pulsar extracts schema definition from the POJO class and constructs the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," that the producer needs to pass to a broker when it connects.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The producer connects to the broker with the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," extracted from the passed-in schema instance.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The broker looks up the schema in the schema storage to check if it is already a registered schema.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"If yes, the broker skips the schema validation since it is a known schema, and returns the schema version to the producer.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"If no, the broker verifies whether a schema can be automatically created in this namespace:"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If ",(0,r.yg)("inlineCode",{parentName:"p"},"isAllowAutoUpdateSchema")," sets to ",(0,r.yg)("strong",{parentName:"p"},"true"),", then a schema can be created, and the broker validates the schema based on the schema compatibility check strategy defined for the topic.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If ",(0,r.yg)("inlineCode",{parentName:"p"},"isAllowAutoUpdateSchema")," sets to ",(0,r.yg)("strong",{parentName:"p"},"false"),", then a schema can not be created, and the producer is rejected to connect to the broker."))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Tip"),":"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"isAllowAutoUpdateSchema")," can be set via ",(0,r.yg)("strong",{parentName:"p"},"Pulsar admin API")," or ",(0,r.yg)("strong",{parentName:"p"},"REST API.")),(0,r.yg)("p",null,"For how to set ",(0,r.yg)("inlineCode",{parentName:"p"},"isAllowAutoUpdateSchema")," via Pulsar admin API, see ",(0,r.yg)("a",{parentName:"p",href:"/docs/2.9.x/schema-manage/#manage-autoupdate-strategy"},"Manage AutoUpdate Strategy"),"."),(0,r.yg)("ol",{start:6},(0,r.yg)("li",{parentName:"ol"},"If the schema is allowed to be updated, then the compatible strategy check is performed.")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If the schema is compatible, the broker stores it and returns the schema version to the producer."),(0,r.yg)("p",{parentName:"li"},"All the messages produced by this producer are tagged with the schema version.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If the schema is incompatible, the broker rejects it."))),(0,r.yg)("h3",{id:"consumer-side"},"Consumer side"),(0,r.yg)("p",null,"This diagram illustrates how does Schema work on the consumer side."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Schema works at the consumer side",src:t(95837).A,width:"1404",height:"1298"})),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The application uses a schema instance to construct a consumer instance."),(0,r.yg)("p",{parentName:"li"},"The schema instance defines the schema that the consumer uses for decoding messages received from a broker.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The consumer connects to the broker with the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," extracted from the passed-in schema instance.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The broker determines whether the topic has one of them (a schema/data/a local consumer and a local producer).")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"If a topic does not have all of them (a schema/data/a local consumer and a local producer):"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If ",(0,r.yg)("inlineCode",{parentName:"p"},"isAllowAutoUpdateSchema")," sets to ",(0,r.yg)("strong",{parentName:"p"},"true"),", then the consumer registers a schema and it is connected to a broker.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If ",(0,r.yg)("inlineCode",{parentName:"p"},"isAllowAutoUpdateSchema")," sets to ",(0,r.yg)("strong",{parentName:"p"},"false"),", then the consumer is rejected to connect to a broker.")))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"If a topic has one of them (a schema/data/a local consumer and a local producer), then the schema compatibility check is performed."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If the schema passes the compatibility check, then the consumer is connected to the broker.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If the schema does not pass the compatibility check, then the consumer is rejected to connect to the broker.")))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The consumer receives messages from the broker."),(0,r.yg)("p",{parentName:"li"},"If the schema used by the consumer supports schema versioning (for example, AVRO schema), the consumer fetches the ",(0,r.yg)("inlineCode",{parentName:"p"},"SchemaInfo")," of the version tagged in messages and uses the passed-in schema and the schema tagged in messages to decode the messages."))))}d.isMDXComponent=!0},95837:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/schema-consumer-436361129cf2d37ee3764960fb377789.png"},17431:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/schema-producer-2682d94503cecdc1dd96dd54bbca105d.png"}}]);