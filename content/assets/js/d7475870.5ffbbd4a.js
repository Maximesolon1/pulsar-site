"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[7789],{15680:(e,a,t)=>{t.d(a,{xA:()=>u,yg:()=>m});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},u=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),g=r,m=p["".concat(s,".").concat(g)]||p[g]||c[g]||l;return t?n.createElement(m,o(o({ref:a},u),{},{components:t})):n.createElement(m,o({ref:a},u))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=t[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8200:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=t(58168),r=(t(96540),t(15680));const l={id:"io-cdc",title:"CDC Connector",sidebar_label:"CDC Connector",original_id:"io-cdc"},o=void 0,i={unversionedId:"io-cdc",id:"version-2.2.1/io-cdc",title:"CDC Connector",description:"Source",source:"@site/versioned_docs/version-2.2.1/io-cdc.md",sourceDirName:".",slug:"/io-cdc",permalink:"/docs/2.2.1/io-cdc",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.2.1/io-cdc.md",tags:[],version:"2.2.1",frontMatter:{id:"io-cdc",title:"CDC Connector",sidebar_label:"CDC Connector",original_id:"io-cdc"}},s={},d=[{value:"Source",id:"source",level:2},{value:"Source Configuration Options",id:"source-configuration-options",level:3},{value:"Configuration Example",id:"configuration-example",level:3},{value:"Usage example",id:"usage-example",level:3}],u={toc:d},p="wrapper";function c(e){let{components:a,...t}=e;return(0,r.yg)(p,(0,n.A)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"source"},"Source"),(0,r.yg)("p",null,"The CDC Source connector is used to capture change log of existing databases like MySQL, MongoDB, PostgreSQL into Pulsar."),(0,r.yg)("p",null,"The CDC Source connector is built on top of ",(0,r.yg)("a",{parentName:"p",href:"https://debezium.io/"},"Debezium"),". This connector stores all data into Pulsar Cluster in a persistent, replicated and partitioned way.\nThis CDC Source are tested by using MySQL, and you could get more information regarding how it works at ",(0,r.yg)("a",{parentName:"p",href:"https://debezium.io/docs/connectors/mysql/"},"this link"),".\nRegarding how Debezium works, please reference to ",(0,r.yg)("a",{parentName:"p",href:"https://debezium.io/docs/tutorial/"},"Debezium tutorial"),". It is recommended that you go through this tutorial first."),(0,r.yg)("h3",{id:"source-configuration-options"},"Source Configuration Options"),(0,r.yg)("p",null,"The Configuration is mostly related to Debezium task config, besides this we should provides the service URL of Pulsar cluster, and topic names that used to store offset and history."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"task.class")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"A source task class that implemented in Debezium.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.hostname")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The address of the Database server.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.port")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The port number of the Database server..")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.user")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the Database user that has the required privileges.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.password")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The password for the Database user that has the required privileges.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.server.id")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The connector\u2019s identifier that must be unique within the Database cluster and similar to Database\u2019s server-id configuration property.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.server.name")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The logical name of the Database server/cluster, which forms a namespace and is used in all the names of the Kafka topics to which the connector writes, the Kafka Connect schema names, and the namespaces of the corresponding Avro schema when the Avro Connector is used.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.whitelist")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"false")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"A list of all databases hosted by this server that this connector will monitor. This is optional, and there are other properties for listing the databases and tables to include or exclude from monitoring.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"key.converter")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The converter provided by Kafka Connect to convert record key.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"value.converter")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The converter provided by Kafka Connect to convert record value.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.history")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the database history class name.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.history.pulsar.topic")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the database history topic where the connector will write and recover DDL statements. This topic is for internal use only and should not be used by consumers.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"database.history.pulsar.service.url")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"Pulsar cluster service url for history topic.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"pulsar.service.url")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"Pulsar cluster service URL for the offset topic used in Debezium. You can use the ",(0,r.yg)("inlineCode",{parentName:"td"},"bin/pulsar-admin --admin-url http://pulsar:8080 sources localrun --source-config-file configs/pg-pulsar-config.yaml")," command to point to the target Pulsar cluster.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"offset.storage.topic")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"null")),(0,r.yg)("td",{parentName:"tr",align:null},"Record the last committed offsets that the connector successfully completed.")))),(0,r.yg)("h3",{id:"configuration-example"},"Configuration Example"),(0,r.yg)("p",null,"Here is a configuration Json example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-$json"},'\n{\n    "tenant": "public",\n    "namespace": "default",\n    "name": "debezium-kafka-source",\n    "className": "org.apache.pulsar.io.kafka.connect.KafkaConnectSource" ,\n    "topicName": "kafka-connect-topic",\n    "configs":\n    {\n        "task.class": "io.debezium.connector.mysql.MySqlConnectorTask",\n        "database.hostname": "localhost",\n        "database.port": "3306",\n        "database.user": "debezium",\n        "database.password": "dbz",\n        "database.server.id": "184054",\n        "database.server.name": "dbserver1",\n        "database.whitelist": "inventory",\n        "database.history": "org.apache.pulsar.io.debezium.PulsarDatabaseHistory",\n        "database.history.pulsar.topic": "history-topic",\n        "database.history.pulsar.service.url": "pulsar://127.0.0.1:6650",\n        "key.converter": "org.apache.kafka.connect.json.JsonConverter",\n        "value.converter": "org.apache.kafka.connect.json.JsonConverter",\n        "pulsar.service.url": "pulsar://127.0.0.1:6650",\n        "offset.storage.topic": "offset-topic"\n    },\n    "archive": "connectors/pulsar-io-kafka-connect-adaptor-2.3.0-SNAPSHOT.nar"\n}\n\n')),(0,r.yg)("p",null,"You could also find the yaml example in this ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/pulsar-io/kafka-connect-adaptor/src/main/resources/debezium-mysql-source-config.yaml"},"file"),", which has similar content below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-$yaml"},'\ntenant: "public"\nnamespace: "default"\nname: "debezium-kafka-source"\ntopicName: "kafka-connect-topic"\narchive: "connectors/pulsar-io-kafka-connect-adaptor-2.3.0-SNAPSHOT.nar"\n\n##autoAck: true\nparallelism: 1\n\nconfigs:\n  ## sourceTask\n  task.class: "io.debezium.connector.mysql.MySqlConnectorTask"\n\n  ## config for mysql, docker image: debezium/example-mysql:0.8\n  database.hostname: "localhost"\n  database.port: "3306"\n  database.user: "debezium"\n  database.password: "dbz"\n  database.server.id: "184054"\n  database.server.name: "dbserver1"\n  database.whitelist: "inventory"\n\n  database.history: "org.apache.pulsar.io.debezium.PulsarDatabaseHistory"\n  database.history.pulsar.topic: "history-topic"\n  database.history.pulsar.service.url: "pulsar://127.0.0.1:6650"\n  ## KEY_CONVERTER_CLASS_CONFIG, VALUE_CONVERTER_CLASS_CONFIG\n  key.converter: "org.apache.kafka.connect.json.JsonConverter"\n  value.converter: "org.apache.kafka.connect.json.JsonConverter"\n  ## PULSAR_SERVICE_URL_CONFIG\n  pulsar.service.url: "pulsar://127.0.0.1:6650"\n  ## OFFSET_STORAGE_TOPIC_CONFIG\n  offset.storage.topic: "offset-topic"\n\n')),(0,r.yg)("h3",{id:"usage-example"},"Usage example"),(0,r.yg)("p",null,"Here is a simple example to store MySQL change data using above example config."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Start a MySQL server with an example database, from which Debezium can capture changes.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-$bash"},"\n docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:0.8\n\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Start a Pulsar service locally in standalone mode.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-$bash"},"\n bin/pulsar standalone\n\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Start pulsar debezium connector, with local run mode, and using above yaml config file. Please make sure that the nar file is available as configured in path ",(0,r.yg)("inlineCode",{parentName:"li"},"connectors/pulsar-io-kafka-connect-adaptor-2.3.0-SNAPSHOT.nar"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-$bash"},"\n bin/pulsar-admin source localrun  --sourceConfigFile debezium-mysql-source-config.yaml\n\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Subscribe the topic for table ",(0,r.yg)("inlineCode",{parentName:"li"},"inventory.products"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'\n bin/pulsar-client consume -s "sub-products" public/default/dbserver1.inventory.products -n 0\n\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"start a MySQL cli docker connector, and use it we could change to the table ",(0,r.yg)("inlineCode",{parentName:"li"},"products")," in MySQL server.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-$bash"},'\n$docker run -it --rm --name mysqlterm --link mysql --rm mysql:5.7 sh -c \'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"\'\n\n')),(0,r.yg)("p",null,"This command will pop out MySQL cli, in this cli, we could do a change in table products, use commands below to change the name of 2 items in table products:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"\nmysql> use inventory;\nmysql> show tables;\nmysql> SELECT * FROM  products ;\nmysql> UPDATE products SET name='1111111111' WHERE id=101;\nmysql> UPDATE products SET name='1111111111' WHERE id=107;\n\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"In above subscribe topic terminal tab, we could find that 2 changes has been kept into products topic.")))}c.isMDXComponent=!0}}]);